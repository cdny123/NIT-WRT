name: NIT-WRT

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择编译分支'
        required: true
        default: 'openwrt-24.10'
        type: choice
        options:
          - openwrt-24.10
          - openwrt-23.05
      device:
        description: '选择设备架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - r3g
      
      SSH_ACTION:
        description: '启用SSH调试（需要手动确认）'
        required: false 
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true        
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
        
      - name: 检查磁盘空间
        run: df -h

      - name: 检查内存使用情况
        run: free -h
        
      - name: 建立环境
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y  # 更新已安装的包
          sudo apt-get install -y build-essential libncurses-dev make4.1+ perl python3.7+ which grep libc-dev asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          if [ $? -ne 0 ]; then
            echo "依赖安装失败"
            exit 1
          fi
        
      - name: 检查磁盘空间
        run: |
          DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ $DISK_USAGE -gt 90 ]; then
            echo "磁盘空间不足，当前使用率: $DISK_USAGE%"
            exit 1
          fi
      
      - name: 克隆源代码
        run: |
          MAX_ATTEMPTS=3
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            rm -rf openwrt
            git clone --depth 1 -b ${{ github.event.inputs.branch }} https://github.com/openwrt/openwrt openwrt
            if [ $? -eq 0 ]; then
              break
            fi
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "克隆失败，第 $ATTEMPT 次重试..."
              sleep 5
            fi
          done
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "克隆失败，达到最大重试次数"
            exit 1
          fi
          cd openwrt
          # 根据设备架构选择正确的配置文件路径
          if [ "${{ github.event.inputs.device }}" == "x86_64" ]; then
            cp -r ../configs/x86_64/.config .
            cp -r ../configs/x86_64/feeds.conf.default .
          elif [ "${{ github.event.inputs.device }}" == "r3g" ]; then
            cp -r ../configs/r3g/.config .
            cp -r ../configs/r3g/feeds.conf.default .
          fi
    
      - name: 更新feeds和安装依赖
        run: |
          cd openwrt
          # 清理feeds缓存
          rm -rf ./feeds
          ./scripts/feeds clean
          ./scripts/feeds update -a
          if [ $? -ne 0 ]; then
            echo "feeds 更新失败"
            cat feeds/update.log  # 输出更新日志
            exit 1
          fi
          ./scripts/feeds install -a
          if [ $? -ne 0 ]; then
            echo "feeds 安装失败"
            cat feeds/install.log  # 输出安装日志
            exit 1
          fi
          make defconfig
          if [ $? -ne 0 ]; then
            echo "make defconfig 失败"
            exit 1
          fi
          
      - name: 运行diy-part1.sh
        run: |
          cd openwrt
          chmod +x ../diy-part1.sh
          echo "开始执行 diy-part1.sh"
          ../diy-part1.sh
          if [ $? -ne 0 ]; then
            echo "diy-part1.sh 运行失败"
            exit 1
          fi
          echo "diy-part1.sh 执行完成"

      - name: 运行diy-part2.sh
        run: |
          cd openwrt
          chmod +x ../diy-part2.sh
          echo "开始执行 diy-part2.sh"
          ../diy-part2.sh
          if [ $? -ne 0 ]; then
            echo "diy-part2.sh 运行失败"
            exit 1
          fi
          echo "diy-part2.sh 执行完成"

      - name: 更新feeds和安装依赖
        run: |
          cd openwrt
          # 清理feeds缓存
          rm -rf ./feeds
          ./scripts/feeds clean
          ./scripts/feeds update -a
          if [ $? -ne 0 ]; then
            echo "feeds 更新失败"
            cat feeds/update.log  # 输出更新日志
            exit 1
          fi
          ./scripts/feeds install -a
          if [ $? -ne 0 ]; then
            echo "feeds 安装失败"
            cat feeds/install.log  # 输出安装日志
            exit 1
          fi
          make defconfig
          if [ $? -ne 0 ]; then
            echo "make defconfig 失败"
            exit 1
          fi

      - name: 检查目录是否生成
        run: |
          cd openwrt
          if [ ! -d "staging_dir/target-x86_64_musl/root-x86/boot" ]; then
            echo "错误: staging_dir/target-x86_64_musl/root-x86/boot 目录未生成，手动创建中..."
            mkdir -p staging_dir/target-x86_64_musl/root-x86/boot
          fi
    
      - name: SSH远程连接（make menuconfig）
        if: github.event.inputs.SSH_ACTION == 'true'
        uses: mxschmitt/action-tmate@v3
        with:
          run: sleep infinity
      
      - name: 更新feeds和安装依赖
        run: |
          cd openwrt
          ./scripts/feeds update -a
          if [ $? -ne 0 ]; then
            echo "feeds 更新失败"
            exit 1
          fi
          ./scripts/feeds install -a
          if [ $? -ne 0 ];then
            echo "feeds 安装失败"
            exit 1
          fi
          make defconfig
          if [ $? -ne 0 ]; then
            echo "make defconfig 失败"
            exit 1
          fi
            
      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          make V=s -j2 > build.log
          if [ $? -ne 0 ]; then
            echo 'Build failed'
            cat build.log
            exit 1
          fi

      - name: 上传生成日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: openwrt/build.log

      - name: 打包上传固件
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: NIT-WRT${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 创建发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=${{ env.TAG_TIME }}" >> $GITHUB_OUTPUT
          touch release.txt
          echo "NIT-WRT X86_64（支持ipv6）" >> release.txt
          echo "管理地址：192.168.6.1" >> release.txt
          echo "默认密码：无密码" >> release.txt
          echo "插件清单：Dockerman, AdGuardHome, OpenClash, Lucky等" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
     
      - name: 发布新版固件
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_TIME }} - NIT-WRT
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/* 
