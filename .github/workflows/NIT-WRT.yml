name: NIT-WRT

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择编译分支'
        required: true
        default: 'openwrt-24.10'
        type: choice
        options:
          - openwrt-24.10
          - openwrt-23.05
      device:
        description: '选择设备架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - r3g
      
      SSH_ACTION:
        description: '启用SSH调试（需要手动确认）'
        required: false 
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true        
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
        
      - name: 检查磁盘空间
        run: df -h

      - name: 检查内存使用情况
        run: free -h
        
      - name: 建立环境
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev make4.1+ perl python3.7+ which grep libc-dev asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev

      - name: 克隆源代码
        run: |
          git clone --depth 1 -b ${{ github.event.inputs.branch }} https://github.com/openwrt/openwrt openwrt
          cd openwrt
          if [ "${{ github.event.inputs.device }}" == "x86_64" ]; then
            cp -r ../configs/x86_64/.config .
            cp -r ../configs/x86_64/feeds.conf.default .
          elif [ "${{ github.event.inputs.device }}" == "r3g" ]; then
            cp -r ../configs/r3g/.config .
            cp -r ../configs/r3g/feeds.conf.default .
          fi
      
      - name: 运行diy-part1.sh
        run: |
          cd openwrt
          chmod +x ../diy-part1.sh
          ../diy-part1.sh

      - name: 运行diy-part2.sh
        run: |
          cd openwrt
          chmod +x ../diy-part2.sh  
          ../diy-part2.sh

      - name: SSH远程连接（make menuconfig）
        if: github.event.inputs.SSH_ACTION == 'true'
        uses: mxschmitt/action-tmate@v3
        with:
          run: sleep infinity
      
      - name: 更新feeds和安装依赖
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
            
      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          make V=s -j2 > build.log || { echo 'Build failed'; cat build.log; exit 1; }
        continue-on-error: true

      - name: 上传生成日志
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-log
          path: openwrt/build.log

      - name: 打包上传固件
        uses: actions/upload-artifact@v3
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: NIT-WRT${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 创建发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=${{ env.TAG_TIME }}" >> $GITHUB_OUTPUT
          touch release.txt
          echo "NIT-WRT X86_64（支持ipv6）" >> release.txt
          echo "管理地址：192.168.6.1" >> release.txt
          echo "默认密码：无密码" >> release.txt
          echo "插件清单：Dockerman, AdGuardHome, OpenClash, Lucky等" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
     
      - name: 发布新版固件
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_TIME }} - NIT-WRT
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/* 
